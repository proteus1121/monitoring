name: Build and Deploy Monitoring Stack

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}-backend
  FRONTEND_IMAGE: ${{ github.repository }}-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # --- Backend: Java with Gradle ---
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build backend with Gradle
        run: ./gradlew build


      # --- Frontend: React ---
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        working-directory: ./src/frontend
        run: npm ci --legacy-peer-deps

#      TODO: add tests
#      - name: Run frontend tests
#        working-directory: ./src/frontend
#        run: npm test -- --watchAll=false

      - name: Build frontend project
        working-directory: ./src/frontend
        run: npm run build

      # --- Docker login ---
      - name: Log in to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Docker: Backend ---
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}

      - name: Build and push backend image
        id: push-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}

      - name: Generate backend attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          subject-digest: ${{ steps.push-backend.outputs.digest }}
          push-to-registry: true

      # --- Docker: Frontend -----
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}

      - name: Build and push frontend image
        id: push-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./src/frontend
          push: true
          tags: |
              ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
              ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}

      - name: Generate frontend attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          subject-digest: ${{ steps.push-frontend.outputs.digest }}
          push-to-registry: true

    
      - name: Create .env file for Docker Compose
        run: |
          echo "MYSQL_PASS=${{ secrets.MYSQL_PASS }}" > .env
          echo "SSH_USER=${{ secrets.SSH_USER }}" >> .env
          echo "PROFILE=docker" >> .env

      - name: Copy Docker Compose files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SWARM_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml,.env,./mosquitto/config/mosquitto.conf"
          target: "/home/${{ secrets.SSH_USER }}/deploy"

      # --- Deploy to Swarm via SSH ---
      - name: Deploy stack on Swarm server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SWARM_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker pull ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            docker pull eclipse-mosquitto:latest
            docker pull phpmyadmin:latest
            docker pull bitnami/mysql:latest
            cd /home/${{ secrets.SSH_USER }}/deploy
            mkdir -p ./mosquitto/data
            mkdir -p ./mosquitto/log
            set -a; . ./.env; set +a
            docker stack deploy -c docker-compose.yml monitoring_stack
